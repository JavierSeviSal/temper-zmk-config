/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM 1
#define NAV 2
#define FUN 3

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

/
{
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors
    {
    media:
        media
        {
            compatible = "zmk,behavior-tap-dance";
#binding-cells = < 0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;

            tapping-term-ms = <400>;
        };

    hm:
        homerow-mods
        {
            compatible = "zmk,behavior-hold-tap";
            label = "homehow-mods";
#binding-cells = < 2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

    tm:
        thumb_mod
        {
            compatible = "zmk,behavior-hold-tap";
            label = "Thumb_mods";
#binding-cells = < 2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };

    weak:
        weak
        {
            compatible = "zmk,behavior-hold-tap";
            label = "WEAK";
            bindings = <&kp>, <&kp>;

#binding-cells = < 2>;
            tapping-term-ms = <230>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <230>;
        };

    tmb_lyr1:
        tmb_lyr1
        {
            compatible = "zmk,behavior-mod-morph";
            label = "TMB_LYR1";
            bindings = <&mo 1>, <&kp DELETE>;

#binding-cells = < 0>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

    tmb_lyr2:
        tmb_lyr2
        {
            compatible = "zmk,behavior-mod-morph";
            label = "TMB_LYR2";
            bindings = <&mo 2>, <&kp BACKSPACE>;

#binding-cells = < 0>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

    barra:
        barra
        {
            compatible = "zmk,behavior-mod-morph";
            label = "BARRA";
            bindings = <&kp SLASH>, <&kp NON_US_BSLH>;

#binding-cells = < 0>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

    borrar:
        borrar
        {
            compatible = "zmk,behavior-mod-morph";
            label = "BORRAR";
            bindings = <&lt 2 BACKSPACE>, <&kp BACKSPACE>;

#binding-cells = < 0>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

    del:
        del
        {
            compatible = "zmk,behavior-mod-morph";
            label = "DEL";
            bindings = <&lt 1 DELETE>, <&kp DELETE>;

#binding-cells = < 0>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };

    combos
    {
        compatible = "zmk,combos";

        caps_combo
        {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 16>;
            timeout-ms = <100>;
            layers = <0>;
        };
    };

    macros
    {
        // Windows sleep key

    win_sleep:
        win_sleep
        {
            wait-ms = <50>;
            tap-ms = <5>;
            compatible = "zmk,behavior-macro";
            label = "WIN_SLEEP_KEY";
#binding-cells = < 0>;
            bindings = <&kp LG(X) & kp U & kp S>;
        };
    };

    keymap
    {
        compatible = "zmk,keymap";

        default_layer
        {
            bindings = <
                &kp Q & kp W & kp E & kp R & kp T & kp Y & kp U & kp I & kp O & kp P & weak LEFT_GUI A & weak LEFT_CONTROL S & hm RIGHT_ALT D & hm LEFT_SHIFT F & kp G & kp H & hm RIGHT_SHIFT J & hm RIGHT_ALT K & weak RIGHT_CONTROL L & kp SEMI & kp Z & kp X & kp C & kp V & kp B & kp N & kp M & kp COMMA & kp DOT & kp FSLH & kp TAB & del & kp SPACE & kp ENTER & borrar & mo 3>;
        };

        num_layer
        {
            bindings = <
                &kp GRAVE & kp AT & kp LBRC & kp RBRC & kp PRCNT & kp STAR & kp N7 & kp N8 & kp N9 & kp MINUS & kp CARET & kp HASH & kp LPAR & hm LEFT_SHIFT RPAR & kp DLLR & barra & hm RIGHT_SHIFT N4 & kp N5 & kp N6 & kp PLUS & kp SQT & kp AMPERSAND & kp LBKT & kp RBKT & kp EXCLAMATION & kp N0 & kp N1 & kp N2 & kp N3 & kp EQUAL & trans & trans & trans & trans & trans & trans>;
        };

        nav_layer
        {
            bindings = <
                &kp ESCAPE & kp C_MUTE & kp C_VOL_DN & kp C_VOL_UP & trans & trans & kp HOME & kp UP_ARROW & kp PAGE_UP & trans & sk LEFT_GUI & sk LCTRL & sk RIGHT_ALT & sk LEFT_SHIFT & trans & trans & kp LEFT_ARROW & kp DOWN & kp RIGHT & trans & trans & kp C_PREV & kp C_PP & kp C_NEXT & trans & trans & kp END & trans & kp PAGE_DOWN & trans & trans & trans & trans & trans & trans & mo 3>;
        };

        fun_layer
        {
            bindings = <
                &bootloader & trans & kp PRINTSCREEN & win_sleep & out OUT_TOG & bootloader & kp F7 & kp F8 & kp F9 & kp F12 & bt BT_SEL 0 & bt BT_SEL 1 & bt BT_SEL 2 & bt BT_SEL 3 & bt BT_SEL 4 & trans & kp F4 & kp F5 & kp F6 & kp F11 & trans & trans & bt BT_CLR & trans & trans & trans & kp F1 & kp F2 & kp F3 & kp F10 & trans & trans & trans & trans & trans & trans>;
        };
    };
};

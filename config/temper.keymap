/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        media: media {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;

            tapping-term-ms = <400>;
        };

        hm: homerow-mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homehow-mods";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        tm: thumb_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "Thumb_mods";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };

        weak: weak {
            compatible = "zmk,behavior-hold-tap";
            label = "WEAK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <230>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_combo {
            bindings = <&kp CAPSLOCK>;
            key-positions = <28 31>;
            timeout-ms = <100>;
        };
    };

    macros {
        // Windows sleep key

        win_sleep: win_sleep {
            wait-ms = <50>;
            tap-ms = <5>;
            compatible = "zmk,behavior-macro";
            label = "WIN_SLEEP_KEY";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH
                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
  &kp GRAVE  &kp AT    &kp LBRC  &kp RBRC  &kp PRCNT    &kp STAR   &kp N7  &kp N8  &kp N9  &kp MINUS
  &kp CARET  &kp HASH  &kp LPAR  &kp RPAR  &kp DLLR     &kp UNDER  &kp N4  &kp N5  &kp N6  &kp PLUS
  &trans     &kp LT    &kp LBKT  &kp RBKT  &kp GT       &trans     &kp N1  &kp N2  &kp N3  &kp EQUAL
                       &trans    &trans    &trans       &kp N0     &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
  &kp TAB    &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans    &trans    &kp HOME  &kp END  &trans     &trans
  &sk LSHFT  &sk LCTRL   &sk LALT      &sk LGUI      &trans    &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &kp ESC
  &trans     &kp C_PREV  &kp C_PP      &kp C_NEXT    &trans    &trans    &kp RET   &trans   &trans     &trans
                         &trans        &trans        &trans    &trans    &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
  &tog 0        &trans        &trans        &trans        &out OUT_TOG    &trans  &kp F7  &kp F8  &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp F4  &kp F5  &kp F6  &kp F11
  &trans        &trans        &bt BT_CLR    &trans        &trans          &trans  &kp F1  &kp F2  &kp F3  &kp F10
                              &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
